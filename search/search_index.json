{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Starting Location","text":"<p>Welcome to the Drift Wars Editor Documentation!</p> <p>The editor can be used for creating both <code>melee</code> and <code>custom</code> maps.</p> <p>Please use the navigation on the left to browse through the documentation.</p> <pre><code>!! Warning: This documentation is still a work in progress.. !!\n!! Documentation is constantly changing and being updated..  !!\n</code></pre>"},{"location":"sideControls/","title":"Side Controls","text":""},{"location":"sideControls/#scene-settings","title":"Scene Settings","text":"<ul> <li>You can use this control to add special effects to terrain cliffs and units</li> <li>Setting <code>Theme</code> to <code>Snow</code> will render snow on terrain cliffs and units</li> <li>More 'themes' will be added in the future.</li> </ul>"},{"location":"sideControls/#map-glow-settings","title":"Map Glow Settings","text":"<ul> <li>Certain ramps, cliff tiles, and texture splats allow for a 'glow' color.  </li> <li>This control allows you to control certain aspects of the 'glow'.</li> </ul>"},{"location":"sideControls/#misc-settings","title":"Misc Settings","text":"<ul> <li>Allows you to change various settings within the map editor.  </li> <li>Interesting or confusing options are explained below..</li> </ul>"},{"location":"sideControls/#enable-unit-stacking","title":"<code>Enable Unit Stacking</code>","text":"<ul> <li>Allows you to place units on top of each other.  </li> <li>You can use this to stack minerals and units on top of each other.</li> </ul>"},{"location":"sideControls/#flood-fill-mode","title":"<code>Flood Fill Mode</code>","text":"<ul> <li>Controls <code>Alt + Click</code> behavior when current <code>Mode</code> is <code>Triangles</code>, <code>Triangle Groups</code>, <code>Unbuildable</code>, <code>Footprints</code>, or <code>Tex Layers</code>.</li> </ul>"},{"location":"sideControls/#symmetry-mode","title":"<code>Symmetry Mode</code>","text":"<ul> <li>Allows you to set symmetry mode when <code>Mode</code> is <code>Tex Splatting</code>, <code>Units</code>, <code>Triangles</code>, <code>Triangle Groups</code>, <code>Decals</code>, <code>Unbuildable</code>, <code>Footprints</code>, or <code>Tex Layers</code><ul> <li>Supported modes:<ul> <li><code>Mirrored (Up | Down)</code></li> <li><code>Mirrored (Left | Right)</code></li> <li><code>Rotational (2-way)</code></li> <li><code>Rotational (3-way)</code></li> <li><code>Rotational (4-way)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"sideControls/#adddel-only-if-symmetries-are-valid","title":"<code>Add/Del only if symmetries are valid</code>","text":"<ul> <li>Will allow you to add/delete selected units only if units can be placed/deleted at each corresponding symmetry point.</li> </ul>"},{"location":"sideControls/#camera","title":"Camera","text":"<ul> <li>Various controls for controlling camera.</li> </ul>"},{"location":"driftScript/builtinTypes/","title":"Built-in Types","text":""},{"location":"driftScript/builtinTypes/#vec2","title":"Vec2","text":"<pre><code>class Vec2 {\n    constructor(x=0.0, y=0.0)\n    function _add(Vec2 other)               // returns Vec2\n    function _sub(Vec2 other)               // returns Vec2\n    function _mul((float|int|Vec2) other)   // returns Vec2\n    function _div((float|int|Vec2) other)   // returns Vec2\n    function _unm(Vec2 other)               // returns Vec2\n    function _tostring()                    // returns string\n    function Equals(other)                  // returns bool\n    function Copy()                         // returns Vec2&lt;int|float&gt;\n    function IsZero(other)                  // returns bool\n    function Dot(Vec2 other)                // returns float or int\n    function Length()                       // returns float\n    function LengthSquared()                // returns float or int\n    function Normalize()                    // returns Vec2&lt;float&gt;\n    function ToInt()                        // returns a copy as Vec2&lt;int&gt;\n    function ToFloat()                      // returns a copy as Vec2&lt;float&gt;\n    m_x = 0.0\n    m_y = 0.0\n}\n</code></pre> <ul> <li>By default <code>Vec2</code> has scalar type of <code>float</code>.</li> <li>However you can change scalar type to be <code>int</code> by passing integers into the constructor<ul> <li>(or by setting <code>m_x</code>, <code>m_y</code> to integers manually)</li> </ul> </li> <li>Warning: <code>==</code>/<code>!=</code> compares reference equality! Not value equality!</li> <li>Use <code>.Equals(other)</code> to compare <code>Vec2</code> values.</li> <li>Use <code>.Copy()</code> to create copies of <code>Vec2</code> values.</li> <li>Assignment operator <code>=</code> will only copy reference (not create a new <code>Vec2</code>)</li> </ul>"},{"location":"driftScript/builtinTypes/#vec3","title":"Vec3","text":"<pre><code>class Vec3 {\n    constructor(x=0.0, y=0.0, z=0.0)\n    function _add(Vec3 other)               // returns Vec3\n    function _sub(Vec3 other)               // returns Vec3\n    function _mul((float|int|Vec3) other)   // returns Vec3\n    function _div((float|int|Vec3) other)   // returns Vec3\n    function _unm(Vec3 other)               // returns Vec3\n    function _tostring()                    // returns string\n    function Equals(other)                  // returns bool\n    function Copy()                         // returns Vec3&lt;int|float&gt;\n    function IsZero(other)                  // returns bool\n    function Dot(Vec3 other)                // returns float or int\n    function Length()                       // returns float\n    function LengthSquared()                // returns float or int\n    function Normalize()                    // returns Vec3&lt;float&gt;\n    function xy()                           // returns Vec2(m_x, m_y)\n    function ToInt()                        // returns a copy as Vec3&lt;int&gt;\n    function ToFloat()                      // returns a copy as Vec3&lt;float&gt;\n    m_x = 0.0\n    m_y = 0.0\n    m_z = 0.0\n}\n</code></pre> <ul> <li>By default <code>Vec3</code> has scalar type of <code>float</code>.</li> <li>However you can change scalar type to be <code>int</code> by passing integers into the constructor<ul> <li>(or by setting <code>m_x</code>, <code>m_y</code>, <code>m_z</code> to integers manually)</li> </ul> </li> <li>Warning: <code>==</code>/<code>!=</code> compares reference equality! Not value equality!</li> <li>Use <code>.Equals(other)</code> to compare <code>Vec3</code> values.</li> <li>Use <code>.Copy()</code> to create copies of <code>Vec3</code> values.</li> <li>Assignment operator <code>=</code> will only copy reference (not create a new <code>Vec3</code>)</li> </ul>"},{"location":"driftScript/builtinTypes/#vec4","title":"Vec4","text":"<pre><code>class Vec4 {\n    constructor(x=0.0, y=0.0, z=0.0, w=0.0)\n    function _add(Vec4 other)               // returns Vec4\n    function _sub(Vec4 other)               // returns Vec4\n    function _mul((float|int|Vec4) other)   // returns Vec4\n    function _div((float|int|Vec4) other)   // returns Vec4\n    function _unm(Vec4 other)               // returns Vec4\n    function _tostring()                    // returns string\n    function Equals(other)                  // returns bool\n    function Copy()                         // returns Vec4&lt;int|float&gt;\n    function IsZero(other)                  // returns bool\n    function Dot(Vec4 other)                // returns float or int\n    function Length()                       // returns float\n    function LengthSquared()                // returns float or int\n    function Normalize()                    // returns Vec4&lt;float&gt;\n    function xy()                           // returns Vec2(m_x, m_y)\n    function xyz()                          // returns Vec3(m_x, m_y, m_z)\n    function ToInt()                        // returns a copy as Vec4&lt;int&gt;\n    function ToFloat()                      // returns a copy as Vec4&lt;float&gt;\n    m_x = 0.0\n    m_y = 0.0\n    m_z = 0.0\n    m_w = 0.0\n}\n</code></pre> <ul> <li>By default <code>Vec4</code> has scalar type of <code>float</code>.</li> <li>However you can change scalar type to be <code>int</code> by passing integers into the constructor<ul> <li>(or by setting <code>m_x</code>, <code>m_y</code>, <code>m_z</code>, <code>m_w</code> to integers manually)</li> </ul> </li> <li>Warning: <code>==</code>/<code>!=</code> compares reference equality! Not value equality!</li> <li>Use <code>.Equals(other)</code> to compare <code>Vec4</code> values.</li> <li>Use <code>.Copy()</code> to create copies of <code>Vec4</code> values.</li> <li>Assignment operator <code>=</code> will only copy reference (not create a new <code>Vec4</code>)</li> </ul>"},{"location":"driftScript/builtinTypes/#aabr","title":"AABR","text":"<p>Axis aligned bounding rectangle</p> <pre><code>class AABR {\n    constructor(minPt = Vec2(), maxPt = Vec2())\n    function _tostring()            // returns string\n    function Equals(other)          // returns bool\n    function Copy()                 // returns AABR&lt;int|float&gt;\n    function GetSize()              // returns Vec2&lt;int|float&gt;\n    function GetTopLeft()           // returns Vec2&lt;int|float&gt;\n    function GetTopRight()          // returns Vec2&lt;int|float&gt;\n    function GetBottomLeft()        // returns Vec2&lt;int|float&gt;\n    function GetBottomRight()       // returns Vec2&lt;int|float&gt;\n    function GetCenter()            // returns Vec2&lt;float&gt;\n    function ToInt()                // returns a copy as AABR&lt;int&gt;\n    function ToFloat()              // returns a copy as AABR&lt;float&gt;\n    m_minPt = Vec2()\n    m_maxPt = Vec2() \n}\n</code></pre> <ul> <li>By default <code>AABR</code> has scalar type of <code>float</code>.</li> <li>However you can change scalar type to be <code>int</code> by passing <code>Vec2&lt;int&gt;</code>'s into the constructor<ul> <li>(or by setting <code>m_minPt</code> and <code>m_maxPt</code> to <code>Vec2&lt;int&gt;</code> manually)</li> </ul> </li> <li>Warning: <code>==</code>/<code>!=</code> compares reference equality! Not value equality!</li> <li>Use <code>.Equals(other)</code> to compare <code>AABR</code> values.</li> <li>Use <code>.Copy()</code> to create copies of <code>AABR</code> values.</li> <li>Assignment operator <code>=</code> will only copy reference (not create a new <code>AABR</code>)</li> </ul>"},{"location":"driftScript/builtinTypes/#future-additions","title":"Future additions","text":"<ul> <li>More types and member functions to be added later</li> </ul>"},{"location":"driftScript/enumerations/","title":"Enumerations","text":""},{"location":"driftScript/enumerations/#boundscheck","title":"BoundsCheck","text":"<pre><code>enum BoundsCheck\n{\n    Invalid,\n    Center,     // Unit's center position is in location\n    Touching,   // Unit is fully inside or touching location\n    Inside      // Unit fully inside a location\n}\n</code></pre> <ul> <li>The <code>BoundsCheck</code> enum is used in unit search queries within locations.  </li> <li>Primarily used in gx_get_units-gx_get_units_count</li> </ul>"},{"location":"driftScript/enumerations/#specialplayer","title":"SpecialPlayer","text":"<pre><code>enum SpecialPlayer\n{\n    Invalid =  0,\n    Neutral = -1,\n    Hostile = -2,\n    Rescue  = -3\n}\n</code></pre> <ul> <li><code>Note:</code> Normal playerIDs are positive, with values: <code>[1-16]</code></li> </ul>"},{"location":"driftScript/enumerations/#shapetype","title":"ShapeType","text":"<pre><code>enum ShapeType\n{\n    Invalid,\n    Circle,\n    Square,\n    Rectangle\n}\n</code></pre>"},{"location":"driftScript/enumerations/#terraintype","title":"TerrainType","text":"<pre><code>// Primary Terrain Types\nenum TerrainType\n{\n    Invalid,\n\n    Normal,         // See SecondaryTerrainTypeNormal\n                    // for valid secondary types\n\n    Water,          // valid secondary types are 0 and 2\n    Lava,           // valid secondary types are 0 and 2\n    Diamond,        // valid secondary types is just 0\n    Glow,           // valid secondary types are [0 - 31]\n    PlayerColor,    // valid secondary types are player_id, i.e. [1-16]\n\n    Unpassable,     // !! Not a dynamic terrain type!\n                    // Cannot dynamically change or be set to!\n\n    Space,          // valid secondary type is just 0\n\n    CliffClosed,    // !! Not a dynamic terrain type!\n                    // Cannot dynamically change or be set to!\n\n    CliffBorder     // !! Not a dynamic terrain type!\n                    // Cannot dynamically change or be set to!\n}\n</code></pre> <ul> <li>Primarily used in gx_set_terrain_type and gx_get_terrain_type</li> </ul>"},{"location":"driftScript/enumerations/#secondaryterraintypenormal","title":"SecondaryTerrainTypeNormal","text":"<pre><code>enum SecondaryTerrainTypeNormal\n{\n    Invalid,\n    Normal,         // Units are normal on this type (no effects)\n    Speed,          // Units move faster on this type\n    AttackRate,     // Units have faster attack rate on this type\n    Heal,           // Units heal faster on this type\n    Forbidden,      // Units insta-die on this type\n    Sniper,         // Units have increased range on this type\n    MeleeOnly,      // Units have decreased range on this type\n    Pacifist        // Units are unable to attack on this type\n}\n</code></pre> <ul> <li>Primarily used in gx_set_terrain_type and gx_get_terrain_type</li> <li>Should only be used in conjunction with <code>TerrainType.Normal</code></li> </ul>"},{"location":"driftScript/enumerations/#forceprop","title":"ForceProp","text":"<pre><code>enum ForceProp\n{\n                    // Access       Type\n    Invalid,\n    Score,          // Read-Write   (int)\n    Name            // Read-Write   (string)\n}\n</code></pre> <ul> <li>Primarily used in property-getterssetters</li> </ul>"},{"location":"driftScript/enumerations/#playerprop","title":"PlayerProp","text":"<pre><code>enum PlayerProp\n{\n                            // Access           Type\n    Invalid,\n    Fungus,                 // Read-Write       (float)\n    Gemstone,               // Read-Write       (float)\n    Supply,                 // Read             (int)\n    MaxSupply,              // Read             (int)\n    NumKills,               // Read             (int)\n    NumDeaths,              // Read             (int)\n    PlayerName,             // Read             (string)\n\n    FullMapVision,          // Read-Write       (bool)\n                            // When set to true, player\n                            // is given vision of entire map\n\n    NumUnitsProduced,       // Read             (int)\n    TagID,                  // Read             (int)\n    ChoseRandom,            // Read             (bool)\n    Race,                   // Read             (int)\n    WeaponsLevel,           // Read-Write       (int)\n    ArmorLevel,             // Read-Write       (int)\n\n    SpeedLevel,             // Read-Write       (int)\n                            // (not implemented atm)\n\n    StartLocationPosition,  // Read             (Vec2)\n    Score                   // Read-Write       (int)\n}\n</code></pre> <ul> <li>Primarily used in property-getterssetters</li> </ul>"},{"location":"driftScript/enumerations/#unitprop","title":"UnitProp","text":"<pre><code>enum UnitProp\n{\n                            // Access           Type\n    Invalid,\n    MaxHealth,              // Read             (int)\n    Health,                 // Read-Write       (float)\n    MaxSpeed,               // Read             (float)\n    Size,                   // Read             (float)\n    UnitType,               // Read             (string)\n    IsOnFire,               // Read             (bool)\n    GetParentJeep,          // Read             (int)\n    GetParentDropship,      // Read             (int)\n    GetParentStarShip,      // Read             (int)\n    GetParentSpinnerShip,   // Read             (int)\n    GetParentBunker,        // Read             (int)\n    GunShipState,           // Read-Write       (GunShipState)\n    Level                   // Read-Write       (int)\n}\n</code></pre> <ul> <li>Primarily used in property-getterssetters</li> <li>Setting <code>Health</code> to <code>&lt;= 0</code> will cause unit to be set to <code>killed</code> state.</li> </ul>"},{"location":"driftScript/enumerations/#locationprop","title":"LocationProp","text":"<pre><code>enum LocationProp\n{\n                    // Access       Type\n    Invalid,\n    TopLeft,        // Read         (Vec2)\n    TopRight,       // Read         (Vec2)\n    BottomLeft,     // Read         (Vec2)\n    BottomRight,    // Read         (Vec2)\n    Center,         // Read         (Vec2)\n    Size            // Read         (Vec2)\n}\n</code></pre> <ul> <li>Primarily used in property-getterssetters</li> </ul>"},{"location":"driftScript/enumerations/#gunshipstate","title":"GunShipState","text":"<pre><code>enum GunShipState\n{\n    Invalid,\n    Normal,\n    StarShot,\n    BigGunLevel1,\n    BigGunLevel2,\n    ChainGunLevel1,\n    ChainGunLevel2\n}\n</code></pre> <ul> <li>Primarily used for setting/getting unit property <code>GunShipState</code> in property-getterssetters</li> </ul> <p>Example:</p> <pre><code>gx_set_unit_prop(unit_id, UnitProp.GunShipState, GunShipState.ChainGunLevel2)\n</code></pre> <ul> <li>the above would give a gunship two chainguns</li> </ul>"},{"location":"driftScript/enumerations/#commandtype","title":"CommandType","text":"<pre><code>enum CommandType : string\n{\n    Invalid,\n    Attack,             // valid params: [m_unitID, m_location, m_pos]\n    Move,               // valid params: [m_unitID, m_location, m_pos]\n    Hold,               // valid params: []\n    Stop,               // valid params: []\n    RightClick          // valid params: [m_unitID, m_location, m_pos]\n}\n</code></pre> <ul> <li>Primarily used in gx_queue_command</li> <li><code>string</code> identifiers for <code>Spells</code> can be used as well.</li> <li>more to be added later</li> </ul>"},{"location":"driftScript/enumerations/#eventtype","title":"EventType","text":"<pre><code>enum EventType\n{\n    Invalid,                // Invalid Event\n\n    PlayerNameChanged,      // Populates m_playerID, m_playerName,\n                            // and m_oldPlayerName of the Event structure\n\n    PlayerLeftGame,         // Populates m_playerID, and m_playerName\n                            // of the Event structure\n\n    TextCommand             // Populates m_playerID, m_playerName,\n                            // and m_cmd of Event structure\n}\n</code></pre>"},{"location":"driftScript/eventQueue/","title":"Event Queue","text":""},{"location":"driftScript/eventQueue/#event-queue","title":"Event Queue","text":"<p>Event Structure:</p> <pre><code>table Event\n{\n    EventType m_type        // Always populated, specifies type of event.\n    int m_playerID = {}\n    string m_playerName = {}\n    string m_oldPlayerName = {}\n    string m_cmd = {}\n}\n</code></pre> <ul> <li>Look at the comments in the definition of EventType to see which fields each <code>EventType</code> populates.</li> </ul> <p>Example of reading events from queue</p> <pre><code>function gx_sim_update()\n{\n    while (!gx_is_event_queue_empty())\n    {\n        local ev = gx_pop_event_from_queue()\n        if (ev.m_type == EventType.PlayerLeftGame)\n        {\n            gx_print(\"Player \" + ev.m_playerID + \" has left the game!\")\n        }\n        else if (ev.m_type == EventType.PlayerNameChanged)\n        {\n            gx_print(ev.m_oldPlayerName + \" changed name to \" + ev.m_playerName)\n        }\n    }\n\n    // do rest of game logic\n}\n</code></pre> <p>Functions that operate on event queue:</p> <ul> <li>gx_is_event_queue_empty</li> <li>gx_pop_event_from_queue</li> </ul> <p>Note:</p> <ul> <li>Any unpopped events are automatically popped off of queue after each gx_sim_update call.</li> </ul>"},{"location":"driftScript/examples/","title":"More Examples..","text":"<p>Probably the best way to figure out <code>.DriftScript</code> is by looking at examples and experimenting. Please have a look at the maps below:</p> <ul> <li><code>/Dev/Maps/Custom/(5) Golemz.DriftMap</code></li> <li><code>/Dev/Maps/Custom/(8) LevelUpBound.DriftMap</code></li> </ul> <p>Feel free to look at the scripting code by opening them up in the map editor and going to: </p> <p><code>Top Bar Menu --&gt; Other --&gt; Script --&gt; /MapInit.DriftScript</code> and <code>Top Bar Menu --&gt; Other --&gt; Script --&gt; /SimUpdate.DriftScript</code></p> <p>Good Luck.. and if you still need help message <code>BRZDRIFT</code> on Discord</p>"},{"location":"driftScript/functions/","title":"Functions","text":""},{"location":"driftScript/functions/#gx_include","title":"gx_include","text":"<pre><code>gx_include(string filename)\n</code></pre> <ul> <li>Includes <code>filename</code> in current compilation.</li> <li>A file is only included once by <code>gx_include</code>; subsequent calls are ignored.</li> </ul>"},{"location":"driftScript/functions/#gx_create_unit","title":"gx_create_unit","text":"<pre><code>int gx_create_unit(table params)\n</code></pre> <pre><code>table params = {\n    string m_unitType,              // Required\n    int m_playerID,                 // Required\n    Vec2 m_position = {},           // Optional\n    string m_location = {},         // Optional\n    int m_level = 1                 // Optional, default unit level = 1\n}\n</code></pre> <pre><code>local new_unit = gx_create_unit({ m_unitType = \"Brute\", m_playerID = 1, m_location = \"my_cool_location\" })\n</code></pre> <ul> <li>Will create unit of type <code>m_unitType</code> at position <code>m_position</code> or at location <code>m_location</code> for player <code>m_playerID</code>.</li> <li>It is undefined behavior to have both <code>m_position</code> and <code>m_location</code> set.</li> <li>If neither <code>m_position</code> nor <code>m_location</code> is set, unit will be created at <code>(0, 0)</code></li> <li>Refer to Vec2 if needed.</li> </ul>"},{"location":"driftScript/functions/#gx_get_sim_tick","title":"gx_get_sim_tick","text":"<pre><code>int gx_get_sim_tick()\n</code></pre> <ul> <li>Returns the current sim tick number in simulation.</li> <li>The gx_sim_init call will have <code>tick = 0</code></li> <li>The first gx_sim_update call will have <code>tick = 1</code></li> <li>The second gx_sim_update call will have <code>tick = 2</code>, etc..</li> <li>every tick corresponds to 50ms real time</li> </ul>"},{"location":"driftScript/functions/#gx_get_distance_between_units","title":"gx_get_distance_between_units","text":"<pre><code>float gx_get_distance_between_units(int unitID, int otherUnitID)\n</code></pre> <ul> <li>returns the distance between the edges of two units</li> <li>will return 0 if one or both of the units do not exist</li> </ul>"},{"location":"driftScript/functions/#gx_get_nearby_units-gx_get_nearby_units_count","title":"gx_get_nearby_units / gx_get_nearby_units_count","text":"<pre><code>int[] gx_get_nearby_units(table params)\nint[] gx_get_nearby_units_count(table params)\n</code></pre> <pre><code>table params = {\n    int m_unitID,                                   // unit_id to center search on\n    float m_radius,                                 // search radius around unit\n    int m_playerIDs[],                              // Optional, Filter for player_id\n    int m_forceIDs[],                               // Optional, Filter for force_id\n    string m_unitTypes[],                           // Optional, Filter for certain unit types\n    string m_exceptUnitTypes[],                     // Optional, ignore certain unit types\n    bool m_bIncludeAirUnits = true,                 // Optional, Set to false if you want to exclude air units\n    bool m_bIncludeGroundUnits = true               // Optional, set to false if you want to exclude ground units\n    bool m_bIncludeKilledUnits = false,             // Optional, Set to true if you want to include killed units\n    bool m_bIncludeRemovedUnits = false             // Optional, set to true if you want to include removed units\n    bool m_bIncludeProjectiles = false              // Optional, include projectiles (default: false)\n}\n</code></pre> <ul> <li><code>m_unitID</code> required to be set</li> <li><code>m_radius</code> required to be set</li> <li>returns units whos outer edges have a distance equal/less than <code>m_radius</code> from <code>m_unitID</code>.</li> <li><code>note:</code> <code>m_unitID</code> will be included in part of query result</li> </ul>"},{"location":"driftScript/functions/#gx_get_units-gx_get_units_count","title":"gx_get_units / gx_get_units_count","text":"<pre><code>int[] gx_get_units(table params)\nint gx_get_units_count(table params)\n</code></pre> <pre><code>table params = {\n    string m_locations[],                           // Optional\n    BoundsCheck m_boundsCheck                       // Default: BoundsCheck.Center\n    int m_playerIDs[],                              // Optional, Filter for player_id\n    int m_forceIDs[],                               // Optional, Filter for force_id\n    string m_unitTypes[],                           // Optional, Filter for certain unit types\n    string m_exceptUnitTypes[],                     // Optional, ignore certain unit types\n    bool m_bIncludeAirUnits = true,                 // Optional, Set to false if you want to exclude air units\n    bool m_bIncludeGroundUnits = true               // Optional, set to false if you want to exclude ground units\n    bool m_bIncludeKilledUnits = false,             // Optional, Set to true if you want to include killed units\n    bool m_bIncludeRemovedUnits = false             // Optional, set to true if you want to include removed units\n    bool m_bIncludeProjectiles = false              // Optional, include projectiles (default: false)\n}\n</code></pre> <ul> <li>If <code>m_locations</code> is defined:<ul> <li>Searches at <code>m_locations</code> for units</li> </ul> </li> <li>If <code>m_locations</code> is not defined:<ul> <li>Searches for units on entire map</li> </ul> </li> <li>Refer to BoundsCheck  if needed.</li> </ul>"},{"location":"driftScript/functions/#gx_create_explosion","title":"gx_create_explosion","text":"<pre><code>void gx_create_explosion(table params)\n</code></pre> <pre><code>table params = {\n    float m_size = {},                  // Optional, Diameter of explosion\n    Vec3 m_color = Vec3(1, 1, 0)        // Optional, ColorSRGB of explosion.\n    string m_location = {},             // Optional, Location for explosion\n    Vec2 m_pos = {}                     // Optional, Position for explosion\n}\n</code></pre> <ul> <li>Refer to Vec2 and Vec3 if needed.</li> </ul> <p>Example:</p> <pre><code>gx_create_explosion( {\n    m_color = Vec3(1, 0, .5),\n    m_location = \"my_location\"\n} )\n</code></pre> <ul> <li>it is undefined behavior to set both <code>m_location</code> and <code>m_pos</code></li> <li>if <code>m_size</code> is not set and <code>m_location</code> is set, the resolved size will be the minimum width/height of <code>m_location</code></li> <li>if <code>m_size</code> is not set and <code>m_pos</code> is set, the resolved size will be <code>1</code></li> <li>Explosions are purely visual. They do not do any damage.</li> <li>Default value for <code>m_color</code> is <code>Vec3(1,1,0)</code> aka <code>0xFFFF00</code> (yellow)</li> <li>Refer to Vec2 and Vec3 if needed.</li> </ul>"},{"location":"driftScript/functions/#gx_kill_unit","title":"gx_kill_unit","text":"<pre><code>void gx_kill_unit(int unit_id)\n</code></pre> <ul> <li>kills the unit <code>unit_id</code>.</li> <li>It is safe to call this function on already killed units</li> </ul>"},{"location":"driftScript/functions/#gx_get_kills","title":"gx_get_kills","text":"<pre><code>void gx_get_kills(int player_id, table params = {})\n</code></pre> <pre><code>params = {\n    m_playerID = {},\n    m_bAlliedKills = {},\n    m_bSelfKills = {},\n    m_bNonAlliedKills = {},\n}\n</code></pre> <ul> <li>if <code>m_playerID</code> is set, none of <code>m_bAlliedKills</code>, <code>m_bSelfKills</code>, <code>m_bNonAlliedKills</code> should be set</li> <li>if empty {} is passed in for params, all kills will be returned, equivalent to: <code>{ m_bAlliedKills = true, m_bSelfKills = rue, m_bNonAlliedKills = true }</code></li> <li>Allied kills does not include self kills</li> </ul>"},{"location":"driftScript/functions/#gx_is_unit_killed","title":"gx_is_unit_killed","text":"<pre><code>void gx_is_unit_killed(int unit_id)\n</code></pre> <ul> <li>returns if the unit <code>unit_id</code> is killed</li> <li>returns <code>true</code> if unit does not exist</li> <li>equivalent to calling <code>!gx_is_unit_alive(unit_id)</code></li> </ul>"},{"location":"driftScript/functions/#gx_remove_unit","title":"gx_remove_unit","text":"<pre><code>void gx_remove_unit(int unit_id)\n</code></pre> <ul> <li>marks the unit to be removed by game</li> <li><code>unit_id</code> will be removed from game before the next gx_sim_update call</li> <li>It is safe to call this function on already killed or removed units</li> </ul>"},{"location":"driftScript/functions/#gx_is_unit_removed","title":"gx_is_unit_removed","text":"<pre><code>void gx_is_unit_removed(int unit_id)\n</code></pre> <ul> <li>returns if unit is marked to be removed</li> <li>will still return <code>true</code> if unit_id does not exist</li> </ul>"},{"location":"driftScript/functions/#gx_unit_exists","title":"gx_unit_exists","text":"<pre><code>bool gx_unit_exists(int unit_id)\n</code></pre> <ul> <li>checks if unit still exists in the game</li> </ul>"},{"location":"driftScript/functions/#gx_is_unit_alive_and_constructed","title":"gx_is_unit_alive_and_constructed","text":"<pre><code>bool gx_is_unit_alive_and_constructed(int unit_id)\n</code></pre> <ul> <li>returns <code>true</code> if unit is alive and constructed</li> <li>returns <code>false</code> if unit_id is invalid or unit no longer exists in game</li> </ul>"},{"location":"driftScript/functions/#gx_is_unit_alive","title":"gx_is_unit_alive","text":"<pre><code>bool gx_is_unit_alive(int unit_id)\n</code></pre> <ul> <li>returns <code>true</code> if unit is alive</li> <li>returns <code>false</code> if unit_id is invalid or unit no longer exists in game</li> <li>Note: This function still returns <code>true</code> if unit is not yet fully constructed</li> <li>equivalent to calling <code>!gx_is_unit_killed(unit_id)</code></li> </ul>"},{"location":"driftScript/functions/#gx_get_unit_position","title":"gx_get_unit_position","text":"<pre><code>Vec3&lt;float&gt; gx_get_unit_position(int unit_id)\n</code></pre> <ul> <li>returns position of unit</li> <li>returns Vec3(0.0, 0.0, 0.0) if unit no longer exists</li> </ul>"},{"location":"driftScript/functions/#gx_set_unit_position","title":"gx_set_unit_position","text":"<pre><code>void gx_set_unit_position(int unit_id, table params)\n</code></pre> <pre><code>table params = {\n    string m_location = {},     // Optional, location to put unit\n}\n</code></pre> <p>Example:</p> <pre><code>gx_set_unit_position(some_unit, { m_location = \"location_to_teleport_to\" } )\n</code></pre> <ul> <li>it is undefined to not set <code>m_location</code> </li> <li>if <code>m_location</code> does not exist, unit will be teleported to Vec2(0.0, 0.0)</li> </ul>"},{"location":"driftScript/functions/#gx_is_ground_unit","title":"gx_is_ground_unit","text":"<pre><code>bool gx_is_ground_unit(int unit_id)\n</code></pre> <ul> <li>returns if unit is currently a <code>ground</code> unit</li> <li>units are always in either the <code>ground</code> or <code>air</code> state</li> <li>note: knock-back effect can cause <code>ground</code> units to temporarily become <code>air</code> units</li> <li>equivalent to calling <code>!gx_is_air_unit(unit_id)</code></li> </ul>"},{"location":"driftScript/functions/#gx_is_air_unit","title":"gx_is_air_unit","text":"<pre><code>bool gx_is_air_unit(int unit_id)\n</code></pre> <ul> <li>returns if unit is currently an <code>air</code> unit</li> <li>units are always in either the <code>ground</code> or <code>air</code> state</li> <li>note: knock-back effect can cause <code>ground</code> units to temporarily become <code>air</code> units</li> <li>equivalent to calling <code>!gx_is_ground_unit(unit_id)</code></li> </ul>"},{"location":"driftScript/functions/#gx_get_players","title":"gx_get_players","text":"<pre><code>int[] gx_get_players(table params = {})\n</code></pre> <pre><code>table params = {\n    bool m_bIncludeNormalPlayers = true;\n    bool m_bIncludeDefeatedPlayers = false;\n    bool m_bIncludeNeutralPlayer = false;\n    bool m_bIncludeRescuePlayer = false;\n    bool m_bIncludeHostilePlayer = false;\n    bool m_bPlayerMustBeInGame = true;\n}\n</code></pre>"},{"location":"driftScript/functions/#gx_get_player","title":"gx_get_player","text":"<pre><code>int gx_get_player(int unit_id)\n</code></pre> <ul> <li>returns the <code>player_id</code> for unit <code>unit_id</code></li> </ul>"},{"location":"driftScript/functions/#gx_print","title":"gx_print","text":"<pre><code>void gx_print(string message, table params = {})\n</code></pre> <pre><code>table params = {\n    int m_forceID = {},      // Optional, send message to only force_id\n    int m_playerID = {}     // Optional, send message to only player_id\n}\n</code></pre> <ul> <li>Should only set <code>m_forceID</code> or <code>m_playerID</code>, it is undefined to set both.</li> <li>If neither <code>m_forceID</code> nor <code>m_playerID</code> is set, message will be broadcasted to all players (and observers)</li> </ul> <p>Example</p> <pre><code>// display chat message 'Hello World!' to player 3\ngx_print(\"Hello World!\", { m_playerID = 3 } )\n\n// display chat message 'Hello World!' to everyone in force 2\ngx_print(\"Hello World!\", { m_forceID = 2 } )\n\n// display chat message 'Hello World!' to everyone\ngx_print(\"Hello World!\")\n\n// equivalent to above, display chat message 'Hello World!' to everyone\ngx_print(\"Hello World!\", {})\n</code></pre> <ul> <li>outputs text to game chat (or map editor console)</li> <li>useful for debugging as well</li> <li><code>print(message)</code> is equivalent to <code>gx_print(message, {})</code></li> <li><code>params</code> are ignored when running in map editor's console</li> </ul>"},{"location":"driftScript/functions/#gx_set_victory","title":"gx_set_victory","text":"<pre><code>void gx_set_victory(table params)\n</code></pre> <pre><code>table params = {\n    int m_playerID = {},\n    int m_forceID = {}\n}\n</code></pre> <ul> <li>once a player or team is set to <code>victory</code>, future calls to <code>gx_set_victory</code>/<code>gx_set_defeat</code> for that player/team will be ignored</li> <li>should only set one of <code>m_playerID</code> or <code>m_forceID</code>, setting both is undefined</li> <li>setting <code>m_forceID</code> will set victory for all players within that force</li> </ul>"},{"location":"driftScript/functions/#gx_set_defeat","title":"gx_set_defeat","text":"<pre><code>void gx_set_defeat(table params)\n</code></pre> <pre><code>table params = {\n    int m_playerID = {},\n    int m_forceID = {},\n    bool m_bKillAllUnits = true     // Optional, (default true)\n}\n</code></pre> <ul> <li>if <code>m_bKillAllUnits</code> is <code>true</code>, all units for player (or team) will be killed.</li> <li>once a player or team is set to <code>defeat</code>, future calls to <code>gx_set_victory</code>/<code>gx_set_defeat</code> for that player/team will be ignored</li> <li>should only set one of <code>m_playerID</code> or <code>m_forceID</code>, setting both is undefined</li> <li>setting <code>m_forceID</code> will set defeat for all players within that force</li> </ul>"},{"location":"driftScript/functions/#gx_encode_text","title":"gx_encode_text","text":"<pre><code>string gx_encode_text(string text)\n</code></pre> <p>Example</p> <pre><code>local someText = gx_encode_text(\"^23Rainbow Text\")\ngx_print(someText)\n</code></pre>"},{"location":"driftScript/functions/#gx_copy_ud","title":"gx_copy_ud","text":"<p>Creates a copy of a <code>unit_data</code>. A <code>unit_data</code> serves as a 'definition' for a type of unit. Required for creating new custom unit types.</p> <pre><code>void gx_copy_ud(string unit_type, string new_unit_type)\n</code></pre> <p>The example below creates a new type of unit called \"User_BabyBrute\" It copies the existing definition of \"Brute\" to \"User_BabyBrute\".</p> <p>Example:</p> <pre><code>gx_copy_ud(\"Brute\", \"User_BabyBrute\")\n</code></pre> <ul> <li>new unit type name MUST begin with <code>User_</code>. This is to prevent naming collisions for future added official units.</li> <li>this function will be a no-op if <code>new_unit_type</code> name does not begin with <code>_</code></li> <li><code>ud</code> is short for <code>unit_definition</code> </li> <li>Can only be called during gx_map_init</li> <li>any attempt to call this outside of the gx_map_init will be ignored.</li> </ul>"},{"location":"driftScript/functions/#gx_modify_ud_props","title":"gx_modify_ud_props","text":"<pre><code>void gx_modify_ud_props(string unit_type, table params = {})\n</code></pre> <pre><code>table params = {\n    string m_friendlyName = {},     // Optional, set unit's friendly name\n    int m_maxHealth = {},           // Optional, set max health\n    float m_maxSpeed = {},          // Optional, set max speed\n    int m_baseArmor = {},           // Optional, sets base armor\n    int m_size = {}                 // Optional, set unit size,\n    int m_gemstoneCost = {},\n    int m_fungusCost = {},\n    int m_supplyCost = {},\n    int m_buildTime = {}\n}\n</code></pre> <p>The example below creates a new type of unit called \"User_BabyBrute\". It copies the existing <code>unit_definition</code> of \"Brute\" to \"User_BabyBrute\".  It then sets properties such as friendly name, maxHealth, baseArmor, and size.</p> <p>Example:</p> <pre><code>gx_copy_ud(\"Brute\", \"User_BabyBrute\")\ngx_modify_ud_props(\"User_BabyBrute\", {\n    m_friendlyName = \"Baby Brute\",\n    m_maxHealth = 30,\n    m_baseArmor = 0,\n    m_size = 1\n})\n</code></pre> <ul> <li>Sets properties for a specific <code>unit_type</code></li> <li><code>ud</code> is short for <code>unit_definition</code> </li> <li>Can only be called during gx_map_init</li> <li>any attempt to call this outside of the gx_map_init will be ignored.</li> </ul>"},{"location":"driftScript/functions/#gx_add_build_structure_item","title":"gx_add_build_structure_item","text":"<pre><code>void gx_add_build_structure_item(string unitType, table params = {})\n</code></pre> <pre><code>table params = {\n    string m_structure = {},    // name of structure to build, i.e. \"Microwave\"\n    Vec2 m_position = {},           // position in command card to place at, leaving empty will use default\n    bool bBuildAdvanced = false     // default is false, if set to True, will be placed in 'build advanced' tab\n}\n</code></pre> <ul> <li>Can only be called during gx_map_init</li> </ul>"},{"location":"driftScript/functions/#gx_remove_all_build_structure_items","title":"gx_remove_all_build_structure_items","text":"<pre><code>void gx_remove_all_build_structure_items(string unitType)\n</code></pre> <ul> <li>Remove all build structure items from worker</li> <li>Can only be called during gx_map_init</li> </ul>"},{"location":"driftScript/functions/#gx_add_build_item","title":"gx_add_build_item","text":"<pre><code>void gx_add_build_item(string unitType, table params)\n</code></pre> <pre><code>table params = {\n    string m_unitType = {},     // unit type to add\n    string m_research ={},      // research to add\n    string m_position = {}      // position in command card\n}\n</code></pre> <ul> <li>Only one <code>m_unitType</code> or <code>m_research</code> should be set</li> <li>Can only be called during gx_map_init</li> <li>Remove all build items from structure</li> </ul>"},{"location":"driftScript/functions/#gx_remove_all_build_items","title":"gx_remove_all_build_items","text":"<pre><code>void gx_remove_all_build_items(string unitType)\n</code></pre> <ul> <li>Remove all build items from structure</li> <li>Can only be called during gx_map_init</li> </ul>"},{"location":"driftScript/functions/#gx_fling_unit","title":"gx_fling_unit","text":"<p>throws the unit</p> <pre><code>void gx_fling_unit(int unit_id, table params = {})\n</code></pre> <pre><code>table params = {\n    Vec2 m_dir = {},        // Optional, 2d direction to throw unit. Does not need to be normalized.\n    Vec3 m_dir3d = {},      // Optional, 3d direction to throw unit. Does not need to be normalized.\n    float m_force = 1       // Optional, velocity to throw unit\n}\n</code></pre> <ul> <li>If neither <code>m_dir</code> nor <code>m_dir3d</code> is set, unit will be thrown in random direction</li> <li>Only <code>m_dir</code> or <code>m_dir3d</code> should be set. Setting both is undefined behavior.</li> <li>Refer to Vec2 and Vec3 if needed. </li> </ul>"},{"location":"driftScript/functions/#gx_set_area_vision","title":"gx_set_area_vision","text":"<pre><code>void gx_set_area_vision(int player_id, table params)\n</code></pre> <pre><code>table params = {\n    string m_location = {},         // location to give or take away vision of (depending on m_bSet)\n    string m_triangleGroup = {},    // triangle group to give or take away vision of (depending on m_bSet)\n    bool m_bFullMapVision = {}      // If set to true, will give or take away vision of entire map (depending on m_bSet)\n    bool m_bSet = true              // If true gives vision, else takes away vision. (default: true)\n}\n</code></pre> <ul> <li>This function gives or removes permanent vision of a <code>m_location</code>, <code>m_triangleGroup</code>, or <code>entire map</code>.</li> <li>Only one of <code>m_location</code>, <code>m_triangleGroup</code>, or <code>m_bFullMapVision</code> should be set.</li> <li>The only valid value of <code>m_bFullMapVision</code> is <code>true</code>. Setting to <code>false</code> is <code>undefined</code>.</li> <li>If you want to give <code>Full Map Vision</code> to a player, set <code>m_bFullMapVision</code> to <code>true</code> and <code>m_bSet</code> to <code>true</code>.</li> <li>If you want to remove <code>Full Map Vision</code> from a player, set <code>m_bFullMapVision</code> to <code>true</code> and <code>m_bSet</code> to <code>false</code>.</li> <li>The value of <code>m_bSet</code> determines if vision is given or taken away from player.</li> </ul>"},{"location":"driftScript/functions/#gx_get_area_vision","title":"gx_get_area_vision","text":"<pre><code>bool gx_get_area_vision(int player_id, table params)\n</code></pre> <pre><code>table params = {\n    string m_location = {},         // location to query vision for\n    string m_triangleGroup = {},    // triangle group to query vision for\n    bool m_bFullMapVision = {}      // If set to true, queries if player has full map vision\n}\n</code></pre> <ul> <li>This function queries if the player has permanent vision of a <code>location</code>, <code>triangleGroup</code>, or <code>entire map</code>.</li> <li>Only one of <code>m_location</code>, <code>m_triangleGroup</code>, or <code>m_bFullMapVision</code> should be set.</li> <li>The only valid value of <code>m_bFullMapVision</code> is <code>true</code>. Setting to <code>false</code> is <code>undefined</code>.</li> </ul>"},{"location":"driftScript/functions/#gx_set_terrain_type","title":"gx_set_terrain_type","text":"<pre><code>void gx_set_terrain_type(params = {})\n</code></pre> <pre><code>table params = {\n    TerrainType m_type         // Required. The type of terrain to change to. See TerrainType enum. \n    int m_secondary = 0         // Secondary terrain type. (default = 0)\n    Vec2 m_index = {},          // 2d index of square to change terrain type of\n    int m_index2 = {},         // 0 or 1, 0 indicates bottom triangle, 1 indicates top.\n                                // If index2 is not defined, entire square specified by m_index\n                                // will be set to terrain type (i.e. both triangles, top and bottom).\n                                // m_index and index2 are ignored if m_location is set.\n    string m_location = {}      // location to set terrain tile types.,\n    string m_triangleGroup = {} // triangle group to set terrian tile stype\n}\n</code></pre> <p>Example that sets terrain at location <code>my_location</code> to Pacifist type:</p> <pre><code>gx_set_terrain_type({\n    m_type = TerrainType.Normal,\n    m_secondary = SecondaryTerrainTypeNormal.Pacifist,\n    m_location = \"my_location\"\n})\n</code></pre> <ul> <li>Refer to TerrainType for valid <code>m_type</code> values</li> <li>If <code>m_type</code> is set to <code>TerrainType.Normal</code>, <code>m_secondary</code> must be one of SecondaryTerrainTypeNormal values</li> <li>Refer to Vec2 if needed.</li> <li>if only <code>m_index</code> is set, the square at <code>m_index</code> is set to terrain type (i.e. both bottom and top triangle)</li> <li>if <code>m_location</code> is set, the triangles within the <code>m_location</code> are set to the new terrain type</li> <li>if <code>m_triangleGroup</code> is set, the triangles within <code>m_triangleGroup</code> are set to the new terrain type</li> <li>if <code>m_location</code> is set, it is <code>undefined behavior</code> to also set  <code>m_index</code>, <code>m_index2</code>, or <code>m_triangleGroup</code></li> <li>if <code>m_triangleGroup</code> is set, is it <code>undefined behavior</code> to also set <code>m_index</code>, <code>m_index2</code>, or <code>m_location</code></li> <li>if <code>m_index</code> is set, it is <code>undefined behavior</code> to also set <code>m_location</code>, and <code>m_triangleGroup</code></li> </ul>"},{"location":"driftScript/functions/#gx_get_terrain_type","title":"gx_get_terrain_type","text":"<pre><code>Vec2&lt;int&gt; gx_get_terrain_type(Vec2 index, int index2 = 0)\n</code></pre> <ul> <li>returns primary terrain type in <code>vec.m_x</code> and returns secondary terrain type in <code>vec.m_y</code></li> </ul>"},{"location":"driftScript/functions/#gx_set_player_camera_look_at","title":"gx_set_player_camera_look_at","text":"<pre><code>void gx_set_player_camera_look_at(int player_id, table params)\n</code></pre> <pre><code>local params = {\n    int m_unitID = {},\n    string m_location = {}\n}\n</code></pre> <ul> <li>Moves camera of <code>player_id</code> to look at <code>m_unit</code> or <code>m_location</code></li> <li>One of <code>m_unit</code> or <code>m_location</code> should be set. Not both.</li> </ul>"},{"location":"driftScript/functions/#gx_lock_player_camera","title":"gx_lock_player_camera","text":"<pre><code>void gx_lock_player_camera(int player_id, table params = {})\n</code></pre> <pre><code>local params = {\n    int m_unitID = {},\n    string m_location = {}\n}\n</code></pre> <ul> <li>locks <code>player_id</code> camera to look at <code>m_unitID</code> or <code>m_location</code>.</li> <li>camera will follow <code>m_unitID</code> or <code>m_location</code> until <code>m_unitID</code> is removed from game</li> <li>can unlock camera by calling <code>gx_unlock_player_camera(player_id)</code></li> <li>passing empty args for <code>params</code> will unlock the camera for <code>player_id</code>.</li> </ul>"},{"location":"driftScript/functions/#gx_unlock_player_camera","title":"gx_unlock_player_camera","text":"<pre><code>void gx_unlock_player_camera(int player_id)\n</code></pre> <ul> <li>unlocks <code>player_id</code> camera position set by gx_lock_player_camera</li> <li>equivalent to calling <code>gx_lock_player_camera(player_id, {})</code></li> </ul>"},{"location":"driftScript/functions/#gx_queue_command","title":"gx_queue_command","text":"<pre><code>gx_queue_command(int unit_ids[], CommandType command, table params = {})\n</code></pre> <pre><code>table params = {\n    int m_unitID,            // unit to target\n    string m_location = {},     // location to target\n    string m_pos = {},          // position to target\n}\n</code></pre> <ul> <li>only one (or zero) unit_id, m_location, m_pos should be set</li> <li>some commands/spells only work when certain params are set</li> <li>(i.e., a spell that can only target units cannot target a <code>m_pos</code> or <code>m_location</code>)</li> <li><code>CommandType</code> can also be a spell identifier</li> <li>See CommandType for possible command values</li> </ul>"},{"location":"driftScript/functions/#gx_set_speech_bubble","title":"gx_set_speech_bubble","text":"<pre><code>void gx_set_speech_bubble(int unit_id, string text, table params = {})\n</code></pre> <ul> <li>set a speech bubble for unit_id</li> <li>currently there are no optional params</li> </ul>"},{"location":"driftScript/functions/#gx_getsetadd_unit_ammo","title":"gx_(get|set|add)_unit_ammo","text":"<pre><code>int gx_get_unit_ammo(int unit_id, string ammoName)\nvoid gx_set_unit_ammo(int unit_id, string ammoName, int count)\nvoid gx_add_unit_ammo(int unit_id, string ammoName, int count)\n</code></pre> <ul> <li>Can query and set how much <code>unit ammo</code> of type <code>ammoName</code> the unit is holding</li> </ul>"},{"location":"driftScript/functions/#gx_getsetadd_player_ammo_in_unit","title":"gx_(get|set|add)_player_ammo_in_unit","text":"<pre><code>int gx_get_player_ammo_in_unit(int unit_id, string ammoName)\nvoid gx_set_player_ammo_in_unit(int unit_id, string ammoName, int count)\nvoid gx_add_player_ammo_in_unit(int unit_id, string ammoName, int count)\n</code></pre> <ul> <li>Can query and set how much <code>player ammo</code> of type <code>ammoName</code> the unit is holding</li> </ul>"},{"location":"driftScript/functions/#gx_get_player_ammo_total","title":"gx_get_player_ammo_total","text":"<pre><code>int gx_get_player_ammo_total(int player_id, string ammoName)\n</code></pre> <ul> <li>Returns how much <code>player ammo</code> of type <code>ammoName</code> the player has</li> </ul>"},{"location":"driftScript/functions/#gx_get_unit_by_name","title":"gx_get_unit_by_name","text":"<pre><code>int gx_get_unit_by_name(params = {})\n</code></pre> <pre><code>local params = {\n    m_name,             // Required                                 (string)\n    m_player_id = 0     // Optional, used to Filter. Default = 0.   (int)\n}\n</code></pre> <ul> <li>returns unit_id with the given <code>m_name</code></li> <li>unit name can be set in map editor.</li> <li>if multiple units have the same name, the first will be returned.</li> </ul>"},{"location":"driftScript/functions/#property-getterssetters","title":"Property Getters/Setters","text":"<ul> <li>Allows you to get/set certain properties for <code>simulation</code>, <code>forces</code>, <code>players</code>, and <code>units</code>, and other things</li> </ul> <pre><code>// getters\nmixed gx_get_force_prop(ForceProp prop, int force_id)\nmixed gx_get_player_prop(PlayerProp prop, int player_id)\nmixed gx_get_unit_prop(UnitProp prop, int unit_id)\nmixed gx_get_location_prop(LocationProp prop, string location)\n\n// setters\nvoid gx_set_force_prop(ForceProp prop, int force_id, mixed val)\nvoid gx_set_player_prop(PlayerProp prop, int player_id, mixed val)\nvoid gx_set_unit_prop(UnitProp prop, int unit_id, mixed val)\n\n// adders\nvoid gx_add_force_prop(ForceProp prop, int force_id, mixed val)\nvoid gx_add_player_prop(PlayerProp prop, int player_id, mixed val)\nvoid gx_add_unit_prop(UnitProp prop, int unit_id, mixed val)\n</code></pre> <ul> <li>Please refer to ForceProp, PlayerProp, UnitProp, and LocationProp for possibles values you can get/set (and their types).</li> <li>Properties that are <code>int</code> or <code>float</code> and are <code>Read-Write</code> can use the <code>gx_add_*</code> functions</li> </ul>"},{"location":"driftScript/functions/#userdata-getterssetters","title":"UserData Getters/Setters","text":"<ul> <li>Allows you to get/set userdata integers for <code>simulation</code>, <code>forces</code>, <code>players</code>, and <code>units</code>, and other things for your own purposes</li> </ul> <pre><code>// getters\nint gx_get_sim_variable(string varName)\nint gx_get_force_variable(int force_id, string varName)\nint gx_get_player_variable(int player_id, string varName)\nint gx_get_unit_variable(int unit_id, string varName)\n\n// setters\nvoid gx_set_sim_variable(string varName, int varValue)\nvoid gx_set_force_variable(int force_id, string varName, int varValue)\nvoid gx_set_player_variable(int player_id, string varName, int varValue)\nvoid gx_set_unit_variable(int unit_id, string varName, int varValue)\n\n// adders\nvoid gx_add_sim_variable(string varName, int varValue)\nvoid gx_add_force_variable(int force_id, string varName, int varValue)\nvoid gx_add_player_variable(int player_id, string varName, int varValue)\nvoid gx_add_unit_variable(int unit_id, string varName, int varValue)\n</code></pre> <ul> <li>Calling <code>gx_get_*</code> to retrieve a non-existing <code>varValue</code> will return <code>0</code>.</li> <li>Only <code>int</code> values can be set.</li> </ul>"},{"location":"driftScript/functions/#gx_is_event_queue_empty","title":"gx_is_event_queue_empty","text":"<pre><code>bool gx_is_event_queue_empty()\n</code></pre> <ul> <li>Check if event queue is empty.</li> <li>See Event Queue</li> </ul>"},{"location":"driftScript/functions/#gx_pop_event_from_queue","title":"gx_pop_event_from_queue","text":"<pre><code>Event gx_pop_event_from_queue()\n</code></pre> <ul> <li>Pop event from event queue.</li> <li>See Event Queue</li> </ul>"},{"location":"driftScript/gotchyas/","title":"Examples and Gotchyas","text":""},{"location":"driftScript/gotchyas/#use-local-for-defining-variables","title":"Use <code>local</code> for defining variables","text":"<ul> <li>Variables must be defined using <code>local</code></li> </ul> <pre><code>local myVariable = 7    // good!\n\nmyVariable2 = 8         // script-error! Forgot local keyword.\n</code></pre>"},{"location":"driftScript/gotchyas/#must-use-operator-to-add-new-keyvalue-to-dictionary","title":"Must use <code>&lt;-</code> operator to add new key/value to dictionary","text":"<pre><code>// need to use &lt;- to add new key/value to dictionary\nlocal myDictionary = {}\nmyDictionary[\"abc\"] &lt;- 7        // works\nmyDictionary[\"def\"] = 9         // script error! key \"def\" does not exist!\n\n// however, you can use = to modify existing value\nmyDictionary[\"abc\"] = 10        // works, since key \"abc\" already exists\nmyDictionary[\"abc\"] &lt;- 12       // also works\n\n// note: can also create dictionaries in-place\nlocal myNewDictionary = { abc = 6, def = 9}   // no quotes for in-place string keys\nmyNewDictionary[15] &lt;- \"some string\"        // keys can also be integers\n</code></pre>"},{"location":"driftScript/gotchyas/#checks-for-reference-equality-not-value-equality","title":"<code>==</code> checks for reference equality, not value equality!","text":"<ul> <li><code>==</code> and <code>!=</code> does not work as expected for Vec2, Vec3, Vec4, AABR and non-primitive types!   </li> <li><code>==</code> for non-primitive types check if references point to same object, which is usually not what you want</li> <li>Instead use their defined <code>.Equals(other)</code> functions!  </li> <li><code>==</code> equality operator for primitive types <code>int</code>, <code>float</code>, <code>bool</code>, <code>string</code> compare by value (not reference)</li> </ul> <pre><code>// == checks if reference points to same object, not value equality\nlocal a = Vec2(6.0, 7.0)\nlocal b = Vec2(1.0, 5.0)\nlocal c = Vec2(1.0, 5.0)\nlocal d = c\nlocal isEqual0 = a.Equals(b)    // false\nlocal isEqual1 = b.Equals(c)    // true\nlocal isEqual2 = (b == c)       // THIS IS FALSE!!!\n                                // ^ References point to different objects.\nlocal isEqual3 = (c == d)       // true. References are the same.\n\n// However,\n// == works as expected for int, float, bool, string types\nlocal q = 3\nlocal w = 3\nlocal isEqual4 = (q == w)       // true \n</code></pre>"},{"location":"driftScript/gotchyas/#assignment-operator-copies-reference-not-value-for-custom-types","title":"<code>=</code> assignment operator copies reference, not value! (for custom types)","text":"<pre><code>local a = Vec2(2.0, 6.0)\nlocal b = a         // reference copy\nlocal c = a.Copy()  // value copy\nlocal d = clone a   // same as .Copy()\nprint(a == b)       // true, a and b reference same object\nprint(a == c)       // false, a and c reference different objects\nprint(a.Equals(c))  // true\nprint(a.Equals(d))  // true\n</code></pre> <ul> <li>this behavior is only for non-primitive types (not <code>int</code>, <code>float</code>, <code>bool</code>, <code>string</code>)</li> <li><code>=</code> assignment operator primitive types <code>int</code>, <code>float</code>, <code>bool</code>, <code>string</code> copy by value (not by reference)</li> <li>To make a copy of an object, use squirrel's builtin <code>clone</code> operator, or use <code>.Copy()</code> function if available.</li> <li>If you make your own types, it's a good idea to create your own <code>.Copy()</code> and <code>.Equal(other)</code> functions.</li> </ul>"},{"location":"driftScript/gotchyas/#casting-ints-floats-strings-etc","title":"Casting, ints, floats, strings, etc...","text":"<pre><code>local a = 5     // a is type 'integer' of value 5\nprint(a)        // prints '5'\nprint(a / 2)    // prints '2',      # integer division is truncated \n\nlocal b = 5.0   // a is type 'float' of value 5.0\nprint(b)        // prints '5.00',   # floats always outputs to 2 decimals\nprint(b / 2)    // prints '2.50',   # float division acts as normal\n\n// You can cast an integer to float or float to integer\n// using the .tointeger() and .tofloat() functions\n\nlocal c = b.tointeger()     // 'c' is now an integer with value 5\nlocal d = a.tofloat()       // 'd' is now a float with value 5.0\nlocal e = a.tointeger()     // .tointeger() acts a dummy functions\n                            // for casting from 'int' -&gt; 'int'\nlocal f = b.tofloat()       // .tofloat() acts a dummy functions\n                            // for casting from 'float' -&gt; 'float'\n\nlocal myString1 = e.tostring()\nprint(myString1)                    // prints '5'\n\nlocal myString2 = f.tostring()\nprint(myString2)                    // prints '5.00'\n\n// number to string conversions happen automatically\nprint(\"abc \" + a)                   // prints \"abc 5\"             \n\n// Warning!\n// You are not allowed to cast using '(int) expr' and '(float) expr'\n// syntax. You must use .tostring(), .tofloat(), .tointeger(), etc..\n// local z = (int) f       // ERROR! Cannot do this type of casting\n\n// You can also print Vec2, Vec3, Vec4, AABR types, see below:\n\n// Prints: \"My Int Vector = (4, 5)\"\nprint(\"My Int Vector = \" + Vec2(4, 5))\n\n// Prints: \"My Float Vector = (4.00, 5.00)\"\nprint(\"My Float Vector = \" + Vec2(4, 5).ToFloat2())\n\n// Prints: \"My Float Vector = (4.00, 5.00)\"\nprint(\"My Float Vector = \" + Vec2(4.0, 5.0))\n</code></pre>"},{"location":"driftScript/gotchyas/#comments","title":"Comments","text":"<ul> <li>You can write single-line comments by using <code>//</code> or <code>#</code></li> <li>You can write multi-line comments by using <code>/* multi-lines */</code></li> </ul> <pre><code>// this is a single line comment\n\n# this is also a comment :)\n\n/*\nthis is multiple lines\nof comments. this text\nwill be ignored by the compiler.\n*/\n</code></pre>"},{"location":"driftScript/gotchyas/#common-dictionary-and-array-tasks","title":"Common dictionary and array tasks","text":"<pre><code>// deleting from dictionary\nlocal myDictionary = { \"abc\": 6, \"def\": 7 }     // create dictionary\ndelete myDictionary[\"abc\"]                  // delete \"abc\" from dictionary\n\n// arrays\nlocal myArray = [\"my_string\", 6, 1, 2]      // create dictionary\nprint(myArray[0])                   // prints \"my_string\"\nmyArray.append(7)                   // myArray:  [\"my_string\", 6, 1, 2, 7]\nprint(myArray[4])                   // prints 7\nmyArray.remove(1)           // remove at index 1, myArray: [\"my_string\", 1, 2, 7]\n</code></pre> <ul> <li>See http://squirrel-lang.org/squirreldoc/reference/language.html for more language features.</li> </ul>"},{"location":"driftScript/gotchyas/#dictionary-and-array-foreach-loops","title":"Dictionary and array foreach loops","text":"<pre><code>// dictionary initializer syntax #1: { key = val }\n// Possible Output (dictionary iteration order is unspecified):\n// a -&gt; 5\n// c -&gt; dog\n// b -&gt; 2\nlocal myDict1 = { a = 5, b = 2, c = \"dog\"}\nforeach (key, val in myDict1) {\n    print(key + \" -&gt; \" + val)\n}\n\n// dictionary initializer syntax #2: { \"key\": val }\n// Possible Output (dictionary iteration order is unspecified):\n// a -&gt; 5\n// c -&gt; dog\n// b -&gt; 2\nlocal myDict2 = { \"a\": 5, \"b\": 2, \"c\": \"dog\"}\nforeach (key, val in myDict2) {\n    print(key + \" : \" + val)\n}\n\n// dictionary single variable iteration..\n// NOTE: this syntax outputs value, not key as in languages like python\n// Possible Output (dictionary iteration order is unspecified):\n// 5\n// dog\n// 2\nlocal myDict3 = { \"a\": 5, \"b\": 2, \"c\": \"dog\"}\nforeach (val in myDict3) {\n    print(val)\n}\n\n// array initializer syntax: [val0, val1, etc]\n// Output (array foreach iteration is ordered):\n// 4\n// 6\n// dog\n// 3\nlocal myArray = [4, 6, \"dog\", 3]\nforeach (val in myArray) {\n    print(val)\n}\n</code></pre> <ul> <li>Please note, single variable foreach loop with dictionary outputs <code>value</code> and not <code>key</code>.<ul> <li>This is different from other languages like <code>Python</code>.</li> </ul> </li> <li>dictionary foreach iteration order is <code>unspecified</code> (which is different than random)</li> </ul>"},{"location":"driftScript/gotchyas/#other","title":"Other","text":"<ul> <li>semicolons <code>;</code> at the end of lines are optional, similar to <code>Python</code></li> </ul>"},{"location":"driftScript/identifiers/","title":"Identifiers","text":"<ul> <li>Integer IDs are used to represent <code>Units</code>, <code>Players</code>, <code>Forces</code>, and other things..</li> <li>Invalid Integer IDs are equal to 0.</li> <li>String identifiers are used to represent <code>Locations</code>, <code>TriangleGroups</code>, <code>UnitDatas</code>, <code>UnitGroups</code> and other things..</li> <li>Invalid string identifiers are equal to empty string <code>\"\"</code>.</li> </ul>"},{"location":"driftScript/intro/","title":"Drift Script","text":""},{"location":"driftScript/intro/#introduction","title":"Introduction","text":"<p><code>DriftScript</code> is the official scripting language of Drift Wars!  </p> <p><code>DriftScript</code> allows you to create custom game logic for both melee and custom maps. It is intended for people who already have good knowledge of other scripting languages such as <code>Python</code>.  </p> <p>If you are new to programming and want to start programming in <code>DriftScript</code>, it is recommended you visit Python 3 and learn <code>Python</code> first, as it is probably easier to learn due to more learning material, and quicker feedback loops.</p>"},{"location":"driftScript/intro/#technical","title":"Technical","text":"<p><code>DriftScript</code> is a modified version of Squirrel 3.2 language.</p> <p>Please refer to the language reference manual here: http://squirrel-lang.org/squirreldoc/reference/language.html</p> <p>Additions to squirrel and/or things you might want to know..</p> <ul> <li><code>int</code> types are signed 64-bit</li> <li><code>float</code> types modified to be a 64-bit <code>Q31.32</code> fixed point types</li> <li>encoding <code>utf-8</code></li> <li><code>Squirrel Standard Library</code> is not supported</li> </ul>"},{"location":"driftScript/math/","title":"Math Library","text":""},{"location":"driftScript/math/#constants","title":"Constants","text":"<ul> <li><code>RAND_MAX</code> - Constant 64-bit int value of 0x00000000FFFFFFFF<ul> <li>(do not rely on the constant value staying the same)</li> </ul> </li> <li><code>PI</code> - Constant float value for PI (3.14159...)</li> </ul>"},{"location":"driftScript/math/#functions","title":"Functions","text":"<ul> <li><code>float sqrt(x)</code> - returns square root of x</li> <li><code>float sin(x)</code> - return sin of x</li> <li><code>float asin(x)</code> - arcsin of x</li> <li><code>float cos(x)</code> - return cos of x</li> <li><code>float acos(x)</code> - arccos of x</li> <li><code>float tan(x)</code> - return tan of x</li> <li><code>float atan(x)</code> - arctan of x</li> <li><code>float atan2(y, x)</code> - arctan2 of x</li> <li><code>int rand()</code> - return random integer from [0, RAND_MAX]</li> <li><code>mixed abs(x)</code> - return absolute value of x.</li> <li><code>mixed min(x, y)</code> - returns the minimum of x and y.</li> <li><code>mixed max(x, y)</code> - returns the maximum of x and y.</li> <li><code>mixed clamp(val, min, max)</code> - clamps val to be between min and max</li> <li><code>float lerp(x, y, a)</code> - linearly interpolate x -&gt; y based on a [0, 1]</li> <li><code>float floor(x)</code></li> <li><code>float ceil(x)</code></li> <li><code>float fmod(x, y)</code> - floating point modulo</li> </ul>"},{"location":"driftScript/math/#note","title":"Note","text":"<ul> <li>Many of these functions are optimized for speed and not accuracy</li> </ul>"},{"location":"driftScript/scriptEntryPoints/","title":"Entry Points","text":"<p>Your script code has 3 entry points.</p>"},{"location":"driftScript/scriptEntryPoints/#gx_map_init","title":"gx_map_init","text":"<pre><code>function gx_map_init() {\n    // your code here\n}\n</code></pre> <ul> <li>The very first entry-point function to be called.<ul> <li>Called before game begins, and even before minimap creation.</li> </ul> </li> <li>This is the only place you are allowed to modify/copy unit datas (i.e. make your own units).</li> <li>This function is only called once.</li> <li>Global variables defined in this script are not accessible from the <code>gx_sim_*</code> functions</li> <li>Should be defined in <code>/MapInit.DriftScript</code></li> </ul>"},{"location":"driftScript/scriptEntryPoints/#gx_sim_init","title":"gx_sim_init","text":"<pre><code>function gx_sim_init() {\n    // your code here\n}\n</code></pre> <ul> <li>Called when game simulation is setup and ready.</li> <li>This is where your initialization code goes.</li> <li>This function is only called once.</li> <li>Global variables defined here are accessible to <code>gx_sim_update</code></li> <li>At this point, gx_get_sim_tick will return 0.</li> <li>Should be defined in <code>/SimUpdate.DriftScript</code></li> </ul>"},{"location":"driftScript/scriptEntryPoints/#gx_sim_update","title":"gx_sim_update","text":"<pre><code>function gx_sim_update() {\n    // your code here\n}\n</code></pre> <ul> <li>Called once every simulation update (roughly every 50ms).</li> <li>On first invocation, gx_get_sim_tick will return 1.<ul> <li>On second invocation, gx_get_sim_tick will return 2, and so on..</li> </ul> </li> <li>This is where your main script code goes.</li> <li>Global variables persist across <code>gx_sim_update</code> calls.</li> <li>Should be defined in <code>/SimUpdate.DriftScript</code></li> </ul>"},{"location":"driftScript/vscodeSyntaxHighlighting/","title":"VSCode Syntax Highlighting","text":""},{"location":"driftScript/vscodeSyntaxHighlighting/#install-squirrel-language-support","title":"Install Squirrel Language Support","text":"<p>Go to visual studio extensions: Search and install:  </p> <ul> <li><code>Squirrel Language Supports</code> by marcinbar</li> <li><code>Squirrel Language Linter</code> by marcinbar</li> </ul> <p>Then modify settings to associate <code>.DriftScript</code> extension with <code>squirrel</code> language</p> <ul> <li>Go to <code>Preferences</code> --&gt; <code>Settings</code></li> <li>Search for setting: <code>Files: Associations</code></li> <li>Add new item: <code>Item</code>: <code>DriftScript</code>, <code>Value</code>: <code>squirrel</code></li> <li>Restart VSCode</li> </ul>"},{"location":"driftScript/vscodeSyntaxHighlighting/#notes","title":"Notes","text":"<ul> <li>There are future plans for a custom VSCode extension for <code>.DriftScript</code> which should allow for improved syntax highlighting and function completion.</li> </ul>"},{"location":"modes/cliffsRamps/","title":"Cliffs/Ramps","text":"<p><code>Cliffs / Ramps</code> allow you to add cliffs and ramps to your map.</p> <ul> <li> <p>Adding Cliffs</p> <ul> <li><code>Add Cliffs</code>: Allows you to add cliffs units can walk on.</li> <li><code>Add Closed Cliffs</code>: Allow you to add unwalkable cliffs.</li> </ul> </li> <li> <p>Adding Ramps</p> <ul> <li>To create ramps, you need to 'assemble' them from smaller pieces.</li> <li>Ramp pieces: <code>Left Ramp</code>, <code>Middle Ramp</code>, <code>Right Ramp</code>, <code>etc...</code></li> <li><code>Important!</code> You can rotate Ramp pieces by pressing <code>R</code> when placing.</li> </ul> </li> </ul>"},{"location":"modes/decals/","title":"Decals","text":"<p><code>Decals</code> allow you to add decorative decals to your map.</p> <ul> <li>It is recommended you place a <code>SpawnLocation0</code> decals at expansion bases.</li> <li>It is recommended you place a <code>SpawnLocation1</code> decals at spawning locations.</li> </ul>"},{"location":"modes/footprints/","title":"Footprints","text":"<p><code>Footprints</code> mode allows you to specify squares that track footprints / unit-movement on your map</p> <ul> <li> <p>You can select squares on the map, and press <code>Enter</code> to make squares track footprints / unit-movement</p> </li> <li> <p>You can select squares on map, and press <code>Shift+Enter</code> to make squares not track foot prints / unit-movement</p> </li> <li> <p>You can select squares on map, and right click to open up context menu for options</p> </li> </ul>"},{"location":"modes/heightMap/","title":"Height Map","text":"<p><code>Height Map</code> allows you to control the height map used on maps.</p> <ul> <li>This allows you to create cool effects such as craters on your maps.</li> <li>Units do less damage when attacking from lower ground to higher ground.</li> <li>Height map unfortunately does not effect fog of war and vision (only cliffs do).</li> <li>Height map also currently does not effect unit <code>xy</code> speed. (may change in future)</li> </ul>"},{"location":"modes/locations/","title":"Locations","text":"<p><code>Locations</code> mode allows you to define location positions for your map</p> <ul> <li><code>Locations</code> can be referenced in <code>DriftScript</code> to define positions and sections of the map.</li> <li>Useful for custom scripting.</li> </ul>"},{"location":"modes/spawns/","title":"Spawns","text":"<p><code>Spawns</code> allow you to place the starting locations for players.</p> <ul> <li>This is where your Town Halls are placed in the beginning of the game (<code>melee</code> maps only)</li> <li>This is also where player cameras are centered on at the begining of the game.</li> <li>You are allowed to place Spawn Locations touching gemstones by enabling <code>Enable Unit Stacking</code></li> </ul>"},{"location":"modes/texLayers/","title":"Tex Layers","text":"<p><code>Tex Layers</code> mode allows you to specify which triangles belong to which <code>Tex Layer</code></p> <ul> <li><code>Triangles</code> overlayed in <code>green</code> are part of <code>Tex Layer #1</code></li> <li><code>Triangles</code> overlayed in <code>blue</code> are part of <code>Tex Layer #2</code></li> </ul>"},{"location":"modes/texSplatting/","title":"Tex Splatting","text":""},{"location":"modes/texSplatting/#introduction","title":"Introduction","text":"<p><code>Tex Splatting</code> allows you to 'paint' textures onto the map. Understanding how splatter terrain is rendered in <code>Drift Wars</code> can be a bit challenging..</p>"},{"location":"modes/texSplatting/#high-level-explaination","title":"High Level Explaination","text":"<p>Rendering method:</p> <ul> <li>Splatter terrain is rendered using two passes.<ul> <li>Pass 1: Renders all <code>triangles</code> in <code>Tex Layer #1</code> using assigned <code>Atlas</code>, <code>Texture Group</code>, and <code>Blend Mode</code> from <code>Layer Settings</code></li> <li>Pass 2: Renders all <code>triangles</code> in <code>Tex Layer #2</code> using assigned <code>Atlas</code>, <code>Texture Group</code>, and <code>Blend Mode</code> from <code>Layer Settings</code></li> </ul> </li> </ul> <p>Other:</p> <ul> <li>Each triangle on the map is rendered exactly once. A triangle cannot belong to both <code>Tex Layer #1</code> and <code>Tex Layer #2</code></li> <li>You can define which <code>triangles</code> are part of which <code>Tex Layer</code> in the <code>Tex Layers</code> mode</li> <li>Each <code>Tex Layer</code> is assigned a single <code>Texture Group</code>, <code>Atlas</code>, and <code>Blend Mode</code></li> <li><code>Drift Wars</code> provides two seperate atlasses to better define 'hard' terrain edges in certain cases, and also allows for some other tricks. You can set which <code>atlas</code> is used for a given <code>Tex Layer</code> in <code>Layer Settings</code></li> <li><code>Drift Wars</code> provides two seperate <code>Texture Groups</code> consisting of 4 <code>Textures</code> each for performance reasons (rather than 1 <code>Texture Group</code> of 8 <code>textures</code>).<ul> <li>This limits each triangle to be blended only by the 4 <code>textures</code> in the <code>texture group</code> assigned to the triangle's <code>Tex Layer</code></li> </ul> </li> <li><code>Tip</code>: You can create 'hard' <code>vertical</code>, <code>horizontal</code>, and <code>diagonal</code> edges by setting triangles to different <code>Tex Layers</code></li> <li><code>Tip</code>: Or you can create 'hard' <code>vertical</code> and <code>horizontal</code> edges by setting <code>Blend Mode</code> to <code>Nearest</code>.</li> </ul>"},{"location":"modes/texSplatting/#layer-settings","title":"Layer Settings","text":"<ul> <li>Assigns which <code>Atlas</code>, <code>Texture Group</code>, and <code>Blend Mode</code> the given <code>Tex Layer</code> should use.</li> </ul>"},{"location":"modes/texSplatting/#atlas-settings","title":"Atlas Settings","text":"<ul> <li>Allows you to set the resolution for texture painting. Usually <code>Normal</code> is good enough.</li> <li>Setting to <code>High</code> will slightly degrade performance and increase map size, but may look better depending on the textures used.</li> </ul>"},{"location":"modes/triangleGroups/","title":"Triangle Groups","text":"<p><code>Triangle Groups</code> mode allows you to define <code>triangle groups</code> for your map.</p> <ul> <li><code>Triangle Groups</code> can be used with certain units types, such as <code>terraforming towers</code>.</li> <li><code>Triangle Groups</code> can also be referenced in <code>DriftScript</code></li> </ul>"},{"location":"modes/triangles/","title":"Triangles","text":""},{"location":"modes/triangles/#normal","title":"Normal","text":"<ul> <li>Normal</li> <li>Speed</li> <li>Attack Rate</li> <li>Armor</li> <li>Forbidden</li> <li>Sniper</li> <li>Reduce Range</li> <li>Pacifist</li> </ul>"},{"location":"modes/triangles/#player-color","title":"Player Color","text":"<ul> <li>Increases speed for player's units</li> </ul>"},{"location":"modes/triangles/#water","title":"Water","text":""},{"location":"modes/triangles/#lava","title":"Lava","text":""},{"location":"modes/triangles/#diamond","title":"Diamond","text":""},{"location":"modes/triangles/#unpassable","title":"Unpassable","text":""},{"location":"modes/triangles/#space","title":"Space","text":""},{"location":"modes/triangles/#glow","title":"Glow","text":""},{"location":"modes/unbuildable/","title":"Unbuildable","text":"<p><code>Unbuildable</code> mode allows you to specify unbuildable squares on your map</p> <ul> <li> <p>You can select squares on the map, and press <code>Enter</code> to make squares unbuildable</p> </li> <li> <p>You can select squares on map, and press <code>Shift+Enter</code> to make squares buildable</p> </li> <li> <p>You can select squares on map, and right click to open up context menu for options</p> </li> </ul>"},{"location":"modes/units/","title":"Units","text":""},{"location":"modes/units/#units","title":"Units","text":"<ul> <li>You can add units on the map for the selected player.</li> </ul>"},{"location":"modes/units/#unit-groups","title":"Unit Groups","text":"<ul> <li>You can assign unit groups to certain units, which can be helpful for scripting.</li> </ul>"},{"location":"other/1v1Spawns/","title":"[Melee] 1v1 Spawns","text":"<ul> <li>The <code>1v1 Spawns</code> dialog allows you to set start locations for 1v1 matches.</li> <li>You can use this to restrict certain spawn location combinations (i.e. close-spawns)</li> <li>Duplicate spawn locations added to dialog will be optimized out when dialog closes.</li> <li>A value of <code>1</code> means <code>Spawn Location 1</code>, <code>2</code> means <code>Spawn Location 2</code>, etc..</li> <li>Having zero defined spawn locations is equivalent to allowing all spawn location combinations.</li> <li>This information is only used in <code>1v1</code> game mode.</li> </ul>"},{"location":"other/dataEditor/","title":"Data Editor","text":""},{"location":"other/dataEditor/#units","title":"Units","text":"<ul> <li>Allows you to edit/copy/delete units</li> <li>Only custom (non-official) units are able to be deleted</li> </ul>"},{"location":"other/dataEditor/#player-research","title":"Player Research","text":"<ul> <li>Allows you to edit/copy/delete <code>player research</code> types</li> <li>Only custom (non-official) <code>player research</code> types are able to be deleted</li> </ul>"},{"location":"other/dataEditor/#unit-research","title":"Unit Research","text":"<ul> <li>Allows you to edit/copy/delete <code>unit research</code> types</li> <li>Only custom (non-official) <code>unit research</code> types are able to be deleted</li> </ul>"},{"location":"other/dataEditor/#player-ammo","title":"Player Ammo","text":"<ul> <li>Allows you to edit/copy/delete <code>player ammo</code> types</li> <li>Only custom (non-official) <code>player ammo</code> types are able to be deleted</li> </ul>"},{"location":"other/dataEditor/#unit-ammo","title":"Unit Ammo","text":"<ul> <li>Allows you to edit/copy/delete <code>unit ammo</code> types</li> <li>Only custom (non-official) <code>unit ammo</code> types are able to be deleted</li> </ul>"},{"location":"other/dataEditor/#icons","title":"Icons","text":"<ul> <li>Allows you to edit/copy/delete <code>icons</code></li> <li>Only custom (non-official) <code>icons</code> are able to be deleted</li> </ul>"},{"location":"other/dataEditor/#sounds","title":"Sounds","text":"<ul> <li>Allows you to edit/copy/delete <code>sounds</code></li> <li>Only custom (non-official) <code>sounds</code> are able to be deleted</li> <li>Note!! Not fully supported yet, currently can only view existing <code>sounds</code></li> </ul>"},{"location":"other/forces/","title":"[Custom] Forces","text":"<p>The <code>Forces</code> dialog allows you to create <code>Forces</code> and assign <code>players</code> to those <code>Forces</code></p> <ul> <li>A <code>Force</code> is a grouping of <code>players</code></li> <li><code>Players</code> that belong to the same <code>Force</code> does not necessarily mean they are on the same 'team'</li> <li>The information in this dialog is only used for <code>custom</code> game-type maps</li> </ul>"},{"location":"other/mapSettings/","title":"Map Settings","text":"<p>The <code>Map Settings</code> dialog allows you to set certain properties of the map.</p> <ul> <li><code>Map Name</code>: The friendly name for the map. This field is <code>required</code>.</li> <li><code>[Custom] Is Custom Map?</code>: By enabling this, certain features are enabled/disabled.<ul> <li>Specifies map is a <code>custom</code> map</li> <li>Town Halls will not be created at spawn locations</li> <li>Workers will not be created near spawn locations</li> <li>Normal Victory/Defeat conditions are ignored</li> <li>Certain <code>DriftScript</code> functions are only enabled for <code>Custom Maps</code>.</li> <li>Default game modes <code>1v1</code>, <code>Teams</code>, <code>FFA</code>, <code>etc</code> will not be selectable in-game.</li> <li>Probably some more differences..</li> </ul> </li> <li><code>[Custom] Mode name</code>: Name of <code>Game Type</code> when <code>Is Custom Map?</code> is enabled.</li> <li><code>Map Credits</code>: Allows you to show some textual credits information for map</li> <li><code>Map Description</code>: Map description</li> <li><code>Set DriftPaint</code>: Uploads a <code>.png</code>, <code>.jpg</code>, <code>.DriftPaint</code> for pre-game loading screen</li> <li><code>Clear DriftPaint</code>: Removes current <code>DriftPaint</code> background</li> </ul>"},{"location":"other/script/","title":"Script","text":"<ul> <li>Double clicking on <code>/MapInit.DriftScript</code> or <code>/SimUpdate.DriftScript</code> will open script file in default text editor</li> <li>Right clicking items in left list-widget allows insertion and deletion of files</li> <li><code>Run Map-Init Script</code>: Does a dry run of <code>MapInit.DriftScript</code><ul> <li>Calls <code>gx_map_init</code> in <code>MapInit.DriftScript</code></li> <li>Prints any errors to console</li> </ul> </li> <li><code>Run Sim-Update Script</code>: Does a dry run of <code>SimUpdate.DriftScript</code><ul> <li>Calls <code>gx_sim_init</code> and <code>gx_sim_update</code> in <code>SimUpdate.DriftScript</code></li> <li>Prints any errors to console</li> </ul> </li> <li>Refer to DriftScript for more information</li> </ul>"},{"location":"other/tags/","title":"[Custom] Tags","text":"<p><code>Tags</code> dialog allows you to define <code>Tags</code> for your custom game mode.</p> <ul> <li>The default tags for <code>melee</code> maps are <code>[ 'Humans', 'Robots', 'Monsters' ]</code></li> <li>The information in this dialog is only used for <code>custom</code> game-type maps</li> </ul>"},{"location":"other/tagsPerForce/","title":"[Custom] Tags Per Force","text":"<p><code>Tags Per Force</code> dialog allows you to set restrictions for which <code>Tags</code> can be part of which <code>Forces</code></p> <ul> <li>The information in this dialog is only used for <code>custom</code> game-type maps</li> </ul>"},{"location":"other/teamSpawns/","title":"[Melee] Team Spawns","text":"<ul> <li>The <code>Team Spawns</code> dialog allows you to assign Team Mappings for spawn locations.<ul> <li>This can force team members to have close-spawns</li> </ul> </li> <li>This information is only used in the <code>Teams</code> game mode.</li> </ul>"},{"location":"sideControls/mapGlowSettings/","title":"mapGlowSettings","text":"<ul> <li>Certain ramps, cliff tiles, and texture splats allow for a 'glow' color.</li> <li>You can tweak </li> </ul>"}]}